-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Object.Transition exposing (EndPositionOptionalArguments, StartPositionOptionalArguments, TagsOptionalArguments, UserOptionalArguments, createdAt, endPosition, id, name, notes, selection, startPosition, steps, tags, updatedAt, user)

import Api.Enum.TagOrderByInput
import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.Union
import Graphql.Field as Field exposing (Field)
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| Select fields to build up a SelectionSet for this object.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) Api.Object.Transition
selection constructor =
    Object.selection constructor


{-| -}
id : Field Api.Scalar.Id Api.Object.Transition
id =
    Object.fieldDecoder "id" [] (Object.scalarDecoder |> Decode.map Api.Scalar.Id)


{-| -}
createdAt : Field Api.Scalar.DateTime Api.Object.Transition
createdAt =
    Object.fieldDecoder "createdAt" [] (Object.scalarDecoder |> Decode.map Api.Scalar.DateTime)


{-| -}
updatedAt : Field Api.Scalar.DateTime Api.Object.Transition
updatedAt =
    Object.fieldDecoder "updatedAt" [] (Object.scalarDecoder |> Decode.map Api.Scalar.DateTime)


{-| -}
name : Field String Api.Object.Transition
name =
    Object.fieldDecoder "name" [] Decode.string


{-| -}
steps : Field (Maybe (List String)) Api.Object.Transition
steps =
    Object.fieldDecoder "steps" [] (Decode.string |> Decode.list |> Decode.nullable)


{-| -}
notes : Field (Maybe (List String)) Api.Object.Transition
notes =
    Object.fieldDecoder "notes" [] (Decode.string |> Decode.list |> Decode.nullable)


type alias StartPositionOptionalArguments =
    { where_ : OptionalArgument Api.InputObject.PositionWhereInput }


{-|

  - where\_ -

-}
startPosition : (StartPositionOptionalArguments -> StartPositionOptionalArguments) -> SelectionSet decodesTo Api.Object.Position -> Field decodesTo Api.Object.Transition
startPosition fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ Api.InputObject.encodePositionWhereInput ]
                |> List.filterMap identity
    in
    Object.selectionField "startPosition" optionalArgs object_ identity


type alias EndPositionOptionalArguments =
    { where_ : OptionalArgument Api.InputObject.PositionWhereInput }


{-|

  - where\_ -

-}
endPosition : (EndPositionOptionalArguments -> EndPositionOptionalArguments) -> SelectionSet decodesTo Api.Object.Position -> Field decodesTo Api.Object.Transition
endPosition fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ Api.InputObject.encodePositionWhereInput ]
                |> List.filterMap identity
    in
    Object.selectionField "endPosition" optionalArgs object_ identity


type alias TagsOptionalArguments =
    { where_ : OptionalArgument Api.InputObject.TagWhereInput, orderBy : OptionalArgument Api.Enum.TagOrderByInput.TagOrderByInput, skip : OptionalArgument Int, after : OptionalArgument String, before : OptionalArgument String, first : OptionalArgument Int, last : OptionalArgument Int }


{-|

  - where\_ -
  - orderBy -
  - skip -
  - after -
  - before -
  - first -
  - last -

-}
tags : (TagsOptionalArguments -> TagsOptionalArguments) -> SelectionSet decodesTo Api.Object.Tag -> Field (Maybe (List decodesTo)) Api.Object.Transition
tags fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ Api.InputObject.encodeTagWhereInput, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.TagOrderByInput.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionField "tags" optionalArgs object_ (identity >> Decode.list >> Decode.nullable)


type alias UserOptionalArguments =
    { where_ : OptionalArgument Api.InputObject.UserWhereInput }


{-|

  - where\_ -

-}
user : (UserOptionalArguments -> UserOptionalArguments) -> SelectionSet decodesTo Api.Object.User -> Field decodesTo Api.Object.Transition
user fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ Api.InputObject.encodeUserWhereInput ]
                |> List.filterMap identity
    in
    Object.selectionField "user" optionalArgs object_ identity

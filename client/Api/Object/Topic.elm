-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Object.Topic exposing (UserOptionalArguments, createdAt, id, name, notes, selection, updatedAt, user)

import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.Union
import Graphql.Field as Field exposing (Field)
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| Select fields to build up a SelectionSet for this object.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) Api.Object.Topic
selection constructor =
    Object.selection constructor


{-| -}
id : Field Api.Scalar.Id Api.Object.Topic
id =
    Object.fieldDecoder "id" [] (Object.scalarDecoder |> Decode.map Api.Scalar.Id)


{-| -}
createdAt : Field Api.Scalar.DateTime Api.Object.Topic
createdAt =
    Object.fieldDecoder "createdAt" [] (Object.scalarDecoder |> Decode.map Api.Scalar.DateTime)


{-| -}
updatedAt : Field Api.Scalar.DateTime Api.Object.Topic
updatedAt =
    Object.fieldDecoder "updatedAt" [] (Object.scalarDecoder |> Decode.map Api.Scalar.DateTime)


{-| -}
name : Field String Api.Object.Topic
name =
    Object.fieldDecoder "name" [] Decode.string


{-| -}
notes : Field (Maybe (List String)) Api.Object.Topic
notes =
    Object.fieldDecoder "notes" [] (Decode.string |> Decode.list |> Decode.nullable)


type alias UserOptionalArguments =
    { where_ : OptionalArgument Api.InputObject.UserWhereInput }


{-|

  - where\_ -

-}
user : (UserOptionalArguments -> UserOptionalArguments) -> SelectionSet decodesTo Api.Object.User -> Field decodesTo Api.Object.Topic
user fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ Api.InputObject.encodeUserWhereInput ]
                |> List.filterMap identity
    in
    Object.selectionField "user" optionalArgs object_ identity

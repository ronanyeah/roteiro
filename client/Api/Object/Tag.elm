-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Object.Tag exposing (SubmissionsOptionalArguments, TransitionsOptionalArguments, UserOptionalArguments, createdAt, id, name, selection, submissions, transitions, updatedAt, user)

import Api.Enum.SubmissionOrderByInput
import Api.Enum.TransitionOrderByInput
import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.Union
import Graphql.Field as Field exposing (Field)
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| Select fields to build up a SelectionSet for this object.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) Api.Object.Tag
selection constructor =
    Object.selection constructor


{-| -}
id : Field Api.Scalar.Id Api.Object.Tag
id =
    Object.fieldDecoder "id" [] (Object.scalarDecoder |> Decode.map Api.Scalar.Id)


{-| -}
createdAt : Field Api.Scalar.DateTime Api.Object.Tag
createdAt =
    Object.fieldDecoder "createdAt" [] (Object.scalarDecoder |> Decode.map Api.Scalar.DateTime)


{-| -}
updatedAt : Field Api.Scalar.DateTime Api.Object.Tag
updatedAt =
    Object.fieldDecoder "updatedAt" [] (Object.scalarDecoder |> Decode.map Api.Scalar.DateTime)


{-| -}
name : Field String Api.Object.Tag
name =
    Object.fieldDecoder "name" [] Decode.string


type alias SubmissionsOptionalArguments =
    { where_ : OptionalArgument Api.InputObject.SubmissionWhereInput, orderBy : OptionalArgument Api.Enum.SubmissionOrderByInput.SubmissionOrderByInput, skip : OptionalArgument Int, after : OptionalArgument String, before : OptionalArgument String, first : OptionalArgument Int, last : OptionalArgument Int }


{-|

  - where\_ -
  - orderBy -
  - skip -
  - after -
  - before -
  - first -
  - last -

-}
submissions : (SubmissionsOptionalArguments -> SubmissionsOptionalArguments) -> SelectionSet decodesTo Api.Object.Submission -> Field (Maybe (List decodesTo)) Api.Object.Tag
submissions fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ Api.InputObject.encodeSubmissionWhereInput, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.SubmissionOrderByInput.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionField "submissions" optionalArgs object_ (identity >> Decode.list >> Decode.nullable)


type alias TransitionsOptionalArguments =
    { where_ : OptionalArgument Api.InputObject.TransitionWhereInput, orderBy : OptionalArgument Api.Enum.TransitionOrderByInput.TransitionOrderByInput, skip : OptionalArgument Int, after : OptionalArgument String, before : OptionalArgument String, first : OptionalArgument Int, last : OptionalArgument Int }


{-|

  - where\_ -
  - orderBy -
  - skip -
  - after -
  - before -
  - first -
  - last -

-}
transitions : (TransitionsOptionalArguments -> TransitionsOptionalArguments) -> SelectionSet decodesTo Api.Object.Transition -> Field (Maybe (List decodesTo)) Api.Object.Tag
transitions fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ Api.InputObject.encodeTransitionWhereInput, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.TransitionOrderByInput.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionField "transitions" optionalArgs object_ (identity >> Decode.list >> Decode.nullable)


type alias UserOptionalArguments =
    { where_ : OptionalArgument Api.InputObject.UserWhereInput }


{-|

  - where\_ -

-}
user : (UserOptionalArguments -> UserOptionalArguments) -> SelectionSet decodesTo Api.Object.User -> Field decodesTo Api.Object.Tag
user fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ Api.InputObject.encodeUserWhereInput ]
                |> List.filterMap identity
    in
    Object.selectionField "user" optionalArgs object_ identity

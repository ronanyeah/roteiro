-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql
module Api.Query exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Field as Field exposing (Field)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import Api.Object
import Api.Interface
import Api.Union
import Api.Scalar
import Api.InputObject
import Graphql.Internal.Builder.Object as Object
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Json.Decode as Decode exposing (Decoder)
import Graphql.Internal.Encode as Encode exposing (Value)



{-| Select fields to build up a top-level query. The request can be sent with
functions from `Graphql.Http`.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) RootQuery
selection constructor =
    Object.selection constructor
type alias PositionRequiredArguments = { id : Api.Scalar.Id }

{-| 

  - id - 

-}
position : PositionRequiredArguments -> SelectionSet decodesTo Api.Object.Position -> Field (Maybe decodesTo) RootQuery
position requiredArgs object_ =
      Object.selectionField "position" [ Argument.required "id" requiredArgs.id ((\(Api.Scalar.Id raw) -> Encode.string raw)) ] (object_) (identity >> Decode.nullable)


{-| 
-}
positions : SelectionSet decodesTo Api.Object.Position -> Field (List decodesTo) RootQuery
positions object_ =
      Object.selectionField "positions" [] (object_) (identity >> Decode.list)


type alias TransitionRequiredArguments = { id : Api.Scalar.Id }

{-| 

  - id - 

-}
transition : TransitionRequiredArguments -> SelectionSet decodesTo Api.Object.Transition -> Field (Maybe decodesTo) RootQuery
transition requiredArgs object_ =
      Object.selectionField "transition" [ Argument.required "id" requiredArgs.id ((\(Api.Scalar.Id raw) -> Encode.string raw)) ] (object_) (identity >> Decode.nullable)


{-| 
-}
transitions : SelectionSet decodesTo Api.Object.Transition -> Field (List decodesTo) RootQuery
transitions object_ =
      Object.selectionField "transitions" [] (object_) (identity >> Decode.list)


type alias SubmissionRequiredArguments = { id : Api.Scalar.Id }

{-| 

  - id - 

-}
submission : SubmissionRequiredArguments -> SelectionSet decodesTo Api.Object.Submission -> Field (Maybe decodesTo) RootQuery
submission requiredArgs object_ =
      Object.selectionField "submission" [ Argument.required "id" requiredArgs.id ((\(Api.Scalar.Id raw) -> Encode.string raw)) ] (object_) (identity >> Decode.nullable)


{-| 
-}
submissions : SelectionSet decodesTo Api.Object.Submission -> Field (List decodesTo) RootQuery
submissions object_ =
      Object.selectionField "submissions" [] (object_) (identity >> Decode.list)


type alias TagRequiredArguments = { id : Api.Scalar.Id }

{-| 

  - id - 

-}
tag : TagRequiredArguments -> SelectionSet decodesTo Api.Object.Tag -> Field (Maybe decodesTo) RootQuery
tag requiredArgs object_ =
      Object.selectionField "tag" [ Argument.required "id" requiredArgs.id ((\(Api.Scalar.Id raw) -> Encode.string raw)) ] (object_) (identity >> Decode.nullable)


{-| 
-}
tags : SelectionSet decodesTo Api.Object.Tag -> Field (List decodesTo) RootQuery
tags object_ =
      Object.selectionField "tags" [] (object_) (identity >> Decode.list)


type alias TopicRequiredArguments = { id : Api.Scalar.Id }

{-| 

  - id - 

-}
topic : TopicRequiredArguments -> SelectionSet decodesTo Api.Object.Topic -> Field (Maybe decodesTo) RootQuery
topic requiredArgs object_ =
      Object.selectionField "topic" [ Argument.required "id" requiredArgs.id ((\(Api.Scalar.Id raw) -> Encode.string raw)) ] (object_) (identity >> Decode.nullable)


{-| 
-}
topics : SelectionSet decodesTo Api.Object.Topic -> Field (List decodesTo) RootQuery
topics object_ =
      Object.selectionField "topics" [] (object_) (identity >> Decode.list)

-- Do not manually edit this file, it was auto-generated by Graphqelm
-- https://github.com/dillonkearns/graphqelm


module Api.Query exposing (..)

import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.Union
import Graphqelm.Field as Field exposing (Field)
import Graphqelm.Internal.Builder.Argument as Argument exposing (Argument)
import Graphqelm.Internal.Builder.Object as Object
import Graphqelm.Internal.Encode as Encode exposing (Value)
import Graphqelm.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphqelm.OptionalArgument exposing (OptionalArgument(Absent))
import Graphqelm.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


{-| Select fields to build up a top-level query. The request can be sent with
functions from `Graphqelm.Http`.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) RootQuery
selection constructor =
    Object.selection constructor


{-| -}
user : SelectionSet decodesTo Api.Object.User -> Field (Maybe decodesTo) RootQuery
user object =
    Object.selectionField "user" [] object (identity >> Decode.nullable)


type alias PositionRequiredArguments =
    { id : Api.Scalar.Id }


{-|

  - id -

-}
position : PositionRequiredArguments -> SelectionSet decodesTo Api.Object.Position -> Field (Maybe decodesTo) RootQuery
position requiredArgs object =
    Object.selectionField "position" [ Argument.required "id" requiredArgs.id (\(Api.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


{-| -}
positions : SelectionSet decodesTo Api.Object.Position -> Field (List decodesTo) RootQuery
positions object =
    Object.selectionField "positions" [] object (identity >> Decode.list)


type alias TransitionRequiredArguments =
    { id : Api.Scalar.Id }


{-|

  - id -

-}
transition : TransitionRequiredArguments -> SelectionSet decodesTo Api.Object.Transition -> Field (Maybe decodesTo) RootQuery
transition requiredArgs object =
    Object.selectionField "transition" [ Argument.required "id" requiredArgs.id (\(Api.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


{-| -}
transitions : SelectionSet decodesTo Api.Object.Transition -> Field (List decodesTo) RootQuery
transitions object =
    Object.selectionField "transitions" [] object (identity >> Decode.list)


type alias SubmissionRequiredArguments =
    { id : Api.Scalar.Id }


{-|

  - id -

-}
submission : SubmissionRequiredArguments -> SelectionSet decodesTo Api.Object.Submission -> Field (Maybe decodesTo) RootQuery
submission requiredArgs object =
    Object.selectionField "submission" [ Argument.required "id" requiredArgs.id (\(Api.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


{-| -}
submissions : SelectionSet decodesTo Api.Object.Submission -> Field (List decodesTo) RootQuery
submissions object =
    Object.selectionField "submissions" [] object (identity >> Decode.list)


type alias TagRequiredArguments =
    { id : Api.Scalar.Id }


{-|

  - id -

-}
tag : TagRequiredArguments -> SelectionSet decodesTo Api.Object.Tag -> Field (Maybe decodesTo) RootQuery
tag requiredArgs object =
    Object.selectionField "tag" [ Argument.required "id" requiredArgs.id (\(Api.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


{-| -}
tags : SelectionSet decodesTo Api.Object.Tag -> Field (List decodesTo) RootQuery
tags object =
    Object.selectionField "tags" [] object (identity >> Decode.list)


type alias TopicRequiredArguments =
    { id : Api.Scalar.Id }


{-|

  - id -

-}
topic : TopicRequiredArguments -> SelectionSet decodesTo Api.Object.Topic -> Field (Maybe decodesTo) RootQuery
topic requiredArgs object =
    Object.selectionField "topic" [ Argument.required "id" requiredArgs.id (\(Api.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.nullable)


{-| -}
topics : SelectionSet decodesTo Api.Object.Topic -> Field (List decodesTo) RootQuery
topics object =
    Object.selectionField "topics" [] object (identity >> Decode.list)

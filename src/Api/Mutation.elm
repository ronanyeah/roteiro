-- Do not manually edit this file, it was auto-generated by Graphqelm
-- https://github.com/dillonkearns/graphqelm


module Api.Mutation exposing (..)

import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.Union
import Graphqelm.Field as Field exposing (Field)
import Graphqelm.Internal.Builder.Argument as Argument exposing (Argument)
import Graphqelm.Internal.Builder.Object as Object
import Graphqelm.Internal.Encode as Encode exposing (Value)
import Graphqelm.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphqelm.OptionalArgument exposing (OptionalArgument(Absent))
import Graphqelm.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


{-| Select fields to build up a top-level mutation. The request can be sent with
functions from `Graphqelm.Http`.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) RootMutation
selection constructor =
    Object.selection constructor


type alias AuthenticateUserRequiredArguments =
    { email : String, password : String }


{-|

  - email -
  - password -

-}
authenticateUser : AuthenticateUserRequiredArguments -> SelectionSet decodesTo Api.Object.AuthResponse -> Field decodesTo RootMutation
authenticateUser requiredArgs object =
    Object.selectionField "authenticateUser" [ Argument.required "email" requiredArgs.email Encode.string, Argument.required "password" requiredArgs.password Encode.string ] object identity


type alias SignUpUserRequiredArguments =
    { email : String, password : String }


{-|

  - email -
  - password -

-}
signUpUser : SignUpUserRequiredArguments -> SelectionSet decodesTo Api.Object.AuthResponse -> Field decodesTo RootMutation
signUpUser requiredArgs object =
    Object.selectionField "signUpUser" [ Argument.required "email" requiredArgs.email Encode.string, Argument.required "password" requiredArgs.password Encode.string ] object identity


type alias CreatePositionRequiredArguments =
    { name : String, notes : List String }


{-|

  - name -
  - notes -

-}
createPosition : CreatePositionRequiredArguments -> SelectionSet decodesTo Api.Object.Position -> Field decodesTo RootMutation
createPosition requiredArgs object =
    Object.selectionField "createPosition" [ Argument.required "name" requiredArgs.name Encode.string, Argument.required "notes" requiredArgs.notes (Encode.string |> Encode.list) ] object identity


type alias CreateTransitionRequiredArguments =
    { name : String, notes : List String, steps : List String, startPosition : Api.Scalar.Id, endPosition : Api.Scalar.Id }


{-|

  - name -
  - notes -
  - steps -
  - startPosition -
  - endPosition -

-}
createTransition : CreateTransitionRequiredArguments -> SelectionSet decodesTo Api.Object.Transition -> Field decodesTo RootMutation
createTransition requiredArgs object =
    Object.selectionField "createTransition" [ Argument.required "name" requiredArgs.name Encode.string, Argument.required "notes" requiredArgs.notes (Encode.string |> Encode.list), Argument.required "steps" requiredArgs.steps (Encode.string |> Encode.list), Argument.required "startPosition" requiredArgs.startPosition (\(Api.Scalar.Id raw) -> Encode.string raw), Argument.required "endPosition" requiredArgs.endPosition (\(Api.Scalar.Id raw) -> Encode.string raw) ] object identity


type alias CreateSubmissionRequiredArguments =
    { name : String, notes : List String, steps : List String, position : Api.Scalar.Id }


{-|

  - name -
  - notes -
  - steps -
  - position -

-}
createSubmission : CreateSubmissionRequiredArguments -> SelectionSet decodesTo Api.Object.Submission -> Field decodesTo RootMutation
createSubmission requiredArgs object =
    Object.selectionField "createSubmission" [ Argument.required "name" requiredArgs.name Encode.string, Argument.required "notes" requiredArgs.notes (Encode.string |> Encode.list), Argument.required "steps" requiredArgs.steps (Encode.string |> Encode.list), Argument.required "position" requiredArgs.position (\(Api.Scalar.Id raw) -> Encode.string raw) ] object identity


type alias CreateTagRequiredArguments =
    { name : String }


{-|

  - name -

-}
createTag : CreateTagRequiredArguments -> SelectionSet decodesTo Api.Object.Tag -> Field decodesTo RootMutation
createTag requiredArgs object =
    Object.selectionField "createTag" [ Argument.required "name" requiredArgs.name Encode.string ] object identity


type alias CreateTopicRequiredArguments =
    { name : String, notes : List String }


{-|

  - name -
  - notes -

-}
createTopic : CreateTopicRequiredArguments -> SelectionSet decodesTo Api.Object.Topic -> Field decodesTo RootMutation
createTopic requiredArgs object =
    Object.selectionField "createTopic" [ Argument.required "name" requiredArgs.name Encode.string, Argument.required "notes" requiredArgs.notes (Encode.string |> Encode.list) ] object identity


type alias UpdatePositionRequiredArguments =
    { id : Api.Scalar.Id, name : String, notes : List String }


{-|

  - id -
  - name -
  - notes -

-}
updatePosition : UpdatePositionRequiredArguments -> SelectionSet decodesTo Api.Object.Position -> Field decodesTo RootMutation
updatePosition requiredArgs object =
    Object.selectionField "updatePosition" [ Argument.required "id" requiredArgs.id (\(Api.Scalar.Id raw) -> Encode.string raw), Argument.required "name" requiredArgs.name Encode.string, Argument.required "notes" requiredArgs.notes (Encode.string |> Encode.list) ] object identity


type alias UpdateTransitionRequiredArguments =
    { id : Api.Scalar.Id, name : String, notes : List String, steps : List String, startPosition : Api.Scalar.Id, endPosition : Api.Scalar.Id }


{-|

  - id -
  - name -
  - notes -
  - steps -
  - startPosition -
  - endPosition -

-}
updateTransition : UpdateTransitionRequiredArguments -> SelectionSet decodesTo Api.Object.Transition -> Field decodesTo RootMutation
updateTransition requiredArgs object =
    Object.selectionField "updateTransition" [ Argument.required "id" requiredArgs.id (\(Api.Scalar.Id raw) -> Encode.string raw), Argument.required "name" requiredArgs.name Encode.string, Argument.required "notes" requiredArgs.notes (Encode.string |> Encode.list), Argument.required "steps" requiredArgs.steps (Encode.string |> Encode.list), Argument.required "startPosition" requiredArgs.startPosition (\(Api.Scalar.Id raw) -> Encode.string raw), Argument.required "endPosition" requiredArgs.endPosition (\(Api.Scalar.Id raw) -> Encode.string raw) ] object identity


type alias UpdateSubmissionRequiredArguments =
    { id : Api.Scalar.Id, name : String, notes : List String, steps : List String, position : Api.Scalar.Id }


{-|

  - id -
  - name -
  - notes -
  - steps -
  - position -

-}
updateSubmission : UpdateSubmissionRequiredArguments -> SelectionSet decodesTo Api.Object.Submission -> Field decodesTo RootMutation
updateSubmission requiredArgs object =
    Object.selectionField "updateSubmission" [ Argument.required "id" requiredArgs.id (\(Api.Scalar.Id raw) -> Encode.string raw), Argument.required "name" requiredArgs.name Encode.string, Argument.required "notes" requiredArgs.notes (Encode.string |> Encode.list), Argument.required "steps" requiredArgs.steps (Encode.string |> Encode.list), Argument.required "position" requiredArgs.position (\(Api.Scalar.Id raw) -> Encode.string raw) ] object identity


type alias UpdateTagRequiredArguments =
    { id : Api.Scalar.Id, name : String }


{-|

  - id -
  - name -

-}
updateTag : UpdateTagRequiredArguments -> SelectionSet decodesTo Api.Object.Tag -> Field decodesTo RootMutation
updateTag requiredArgs object =
    Object.selectionField "updateTag" [ Argument.required "id" requiredArgs.id (\(Api.Scalar.Id raw) -> Encode.string raw), Argument.required "name" requiredArgs.name Encode.string ] object identity


type alias UpdateTopicRequiredArguments =
    { id : Api.Scalar.Id, name : String, notes : List String }


{-|

  - id -
  - name -
  - notes -

-}
updateTopic : UpdateTopicRequiredArguments -> SelectionSet decodesTo Api.Object.Topic -> Field decodesTo RootMutation
updateTopic requiredArgs object =
    Object.selectionField "updateTopic" [ Argument.required "id" requiredArgs.id (\(Api.Scalar.Id raw) -> Encode.string raw), Argument.required "name" requiredArgs.name Encode.string, Argument.required "notes" requiredArgs.notes (Encode.string |> Encode.list) ] object identity


type alias DeletePositionRequiredArguments =
    { id : Api.Scalar.Id }


{-|

  - id -

-}
deletePosition : DeletePositionRequiredArguments -> Field Api.Scalar.Id RootMutation
deletePosition requiredArgs =
    Object.fieldDecoder "deletePosition" [ Argument.required "id" requiredArgs.id (\(Api.Scalar.Id raw) -> Encode.string raw) ] (Decode.oneOf [ Decode.string, Decode.float |> Decode.map toString, Decode.int |> Decode.map toString, Decode.bool |> Decode.map toString ] |> Decode.map Api.Scalar.Id)


type alias DeleteTransitionRequiredArguments =
    { id : Api.Scalar.Id }


{-|

  - id -

-}
deleteTransition : DeleteTransitionRequiredArguments -> Field Api.Scalar.Id RootMutation
deleteTransition requiredArgs =
    Object.fieldDecoder "deleteTransition" [ Argument.required "id" requiredArgs.id (\(Api.Scalar.Id raw) -> Encode.string raw) ] (Decode.oneOf [ Decode.string, Decode.float |> Decode.map toString, Decode.int |> Decode.map toString, Decode.bool |> Decode.map toString ] |> Decode.map Api.Scalar.Id)


type alias DeleteSubmissionRequiredArguments =
    { id : Api.Scalar.Id }


{-|

  - id -

-}
deleteSubmission : DeleteSubmissionRequiredArguments -> Field Api.Scalar.Id RootMutation
deleteSubmission requiredArgs =
    Object.fieldDecoder "deleteSubmission" [ Argument.required "id" requiredArgs.id (\(Api.Scalar.Id raw) -> Encode.string raw) ] (Decode.oneOf [ Decode.string, Decode.float |> Decode.map toString, Decode.int |> Decode.map toString, Decode.bool |> Decode.map toString ] |> Decode.map Api.Scalar.Id)


type alias DeleteTagRequiredArguments =
    { id : Api.Scalar.Id }


{-|

  - id -

-}
deleteTag : DeleteTagRequiredArguments -> Field Api.Scalar.Id RootMutation
deleteTag requiredArgs =
    Object.fieldDecoder "deleteTag" [ Argument.required "id" requiredArgs.id (\(Api.Scalar.Id raw) -> Encode.string raw) ] (Decode.oneOf [ Decode.string, Decode.float |> Decode.map toString, Decode.int |> Decode.map toString, Decode.bool |> Decode.map toString ] |> Decode.map Api.Scalar.Id)


type alias DeleteTopicRequiredArguments =
    { id : Api.Scalar.Id }


{-|

  - id -

-}
deleteTopic : DeleteTopicRequiredArguments -> Field Api.Scalar.Id RootMutation
deleteTopic requiredArgs =
    Object.fieldDecoder "deleteTopic" [ Argument.required "id" requiredArgs.id (\(Api.Scalar.Id raw) -> Encode.string raw) ] (Decode.oneOf [ Decode.string, Decode.float |> Decode.map toString, Decode.int |> Decode.map toString, Decode.bool |> Decode.map toString ] |> Decode.map Api.Scalar.Id)
